from scipy.optimize import curve_fit
import numpy as np
import math

N = 2607000
S0 = 2606992

def func_for_rho(x, rho):
    return N - x + rho * np.log(x / S0)

xData = np.array([2606992, 2606990, 2606987, 2606981, 2606980, 2606976, 2606970, 2606961, 2606945, 2606915, 2606868, 2606824, 2606791, 2606745, 2606677, 2606601, 2606494, 2606367, 2606196, 2606063, 2605925, 2605668, 2605393, 2605111, 2604752, 2604415, 2604020, 2603596, 2603098, 2602575, 2602047, 2601469, 2600999, 2600521, 2600096, 2599636, 2599161, 2598646, 2598181, 2597728, 2597357, 2597003, 2596637, 2596228, 2595752, 2595310, 2594854, 2594454, 2594155, 2593741, 2593365, 2593017, 2592645, 2592288, 2592013, 2591774, 2591503, 2591225, 2590966, 2590740, 2590489, 2590289, 2590149, 2589976, 2589738, 2589569, 2589422, 2589268, 2589147, 2589040, 2588911, 2588781, 2588668, 2588557, 2588428, 2588333, 2588255, 2588149, 2588034, 2587941, 2587848, 2587756, 2587670, 2587612, 2587552, 2587468, 2587376, 2587302, 2587239, 2587182, 2587132, 2587077, 2587011, 2586956, 2586900, 2586850, 2586802, 2586769, 2586715, 2586665, 2586619, 2586576, 2586546, 2586519, 2586487, 2586445, 2586401, 2586368, 2586338, 2586325, 2586321])
yData = np.array([8, 9, 12, 18, 19, 23, 26, 33, 49, 77, 117, 156, 184, 225, 280, 347, 440, 558, 697, 816, 919, 1139, 1368, 1596, 1883, 2139, 2435, 2755, 3152, 3537, 3908, 4327, 4658, 4966, 5207, 5510, 5847, 6153, 6462, 6773, 6984, 7182, 7414, 7692, 8003, 8331, 8654, 8925, 9121, 9415, 9694, 9955, 10211, 10480, 10674, 10822, 11010, 11212, 11411, 11574, 11753, 11896, 11978, 12082, 12255, 12358, 12451, 12567, 12646, 12706, 12798, 12878, 12946, 13015, 13099, 13156, 13200, 13267, 13344, 13397, 13454, 13516, 13563, 13600, 13631, 13678, 13737, 13781, 13822, 13856, 13881, 13914, 13955, 13983, 14023, 14049, 14075, 14090, 14127, 14158, 14187, 14215, 14232, 14252, 14265, 14293, 14323, 14345, 14359, 14365, 14367])

popt, pcov = curve_fit(func_for_rho, xData, yData)
rho = popt[0]

alpha = math.sqrt((S0/rho - 1) ** 2 + (2*S0*(N - S0)) / (rho ** 2))
phi = np.arctanh([(S0/rho - 1) / alpha])[0]

def func_for_a(t, a):
    return ((rho ** 2) / S0) * (( S0 / rho - 1) + alpha * np.tanh(alpha * a * t / 2 - phi))

tData = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])

rData = np.array([0, 1, 1, 1, 1, 1, 4, 6, 6, 8, 15, 20, 25, 30, 43, 52, 66, 75, 107, 121, 156, 193, 239, 293, 365, 446, 545, 649, 750, 888, 1045, 1204, 1343, 1513, 1697, 1854, 1992, 2201, 2357, 2499, 2659, 2815, 2949, 3080, 3245, 3359, 3492, 3621, 3724, 3844, 3941, 4028, 4144, 4232, 4313, 4404, 4487, 4563, 4623, 4686, 4758, 4815, 4873, 4942, 5007, 5073, 5127, 5165, 5207, 5254, 5291, 5341, 5386, 5428, 5473, 5511, 5545, 5584, 5622, 5662, 5698, 5728, 5767, 5788, 5817, 5854, 5887, 5917, 5939, 5962, 5987, 6009, 6034, 6061, 6077, 6101, 6123, 6141, 6158, 6177, 6194, 6209, 6222, 6229, 6248, 6262, 6276, 6287, 6303, 6310, 6312])

poptd, pcovd = curve_fit(func_for_a, tData, rData)
a = poptd[0]

r = a/rho

def get_vals():
    return a, r
